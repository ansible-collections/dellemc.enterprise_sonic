#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for sonic_bgp_neighbors
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community',
    'license': 'Apache 2.0'
}

DOCUMENTATION = """
---
module: sonic_bgp_neighbors
version_added: "2.10"
author: "Dhivya P (@dhivayp)"
short_description: Configure global BGP protocol settings on SONiC.
description:
  - This module provides configuration management of global BGP parameters on devices running SONiC
notes:
  - Tested against SONiC Version 3.0.1
options:
  config:
    description:
      - Specifies the BGP related configuration.
    type: list
    elements: dict
    suboptions:
      bgp_as:
        description:
          - Specifies the BGP Autonomous System (AS) number to configure on the device.
        type: str
        required: true
      vrf_name:
        description:
          - Specifies the vrf name
        type: str
        default: 'default'
      peergroup:
        description:
          - Specifies the list of peer groups
        type: list
        elements: dict
        suboptions:
          name:
            description: name of the peer group
            type: str
      neighbors:
        description:
          - Specifies BGP neighbor related configurations.
        type: list
        elements: dict
        suboptions:
          neighbor:
            description:
              - Neighbor router address.
            type: str
            required: True
          remote_as:
            description:
              - Remote AS of the BGP neighbor to configure.
            type: int
            required: True
          local_as:
            description:
              - The local AS number for the neighbor.
            type: int
          update_source:
            description:
              - Source of the routing updates.
            type: str
          password:
            description:
              - Password to authenticate the BGP peer connection.
            type: str
          enabled:
            description:
              - Administratively shutdown or enable a neighbor.
            type: bool
          description:
            description:
              - Neighbor specific description.
            type: str
          ebgp_multihop:
            description:
              - Specifies the maximum hop count for EBGP neighbors not on directly connected networks.
              - The range is from 1 to 255.
            type: int
          peer_group:
            description:
              - Name of the peer group that the neighbor is a member of.
            type: str
          timers:
            description:
              - Specifies BGP neighbor timer related configurations.
            type: dict
            suboptions:
              keepalive:
                description:
                  - Frequency (in seconds) with which the device sends keepalive messages to its peer.
                  - The range is from 0 to 65535.
                type: int
                required: True
              holdtime:
                description:
                  - Interval (in seconds) after not receiving a keepalive message that SONiC declares a peer dead.
                  - The range is from 0 to 65535.
                type: int
                required: True
  state:
    description:
      - Specifies the operation to be performed on the BGP process configured on the device.
      - In case of merged, the input configuration will be merged with the existing BGP configuration on the device.
      - In case of deleted the existing BGP configuration will be removed from the device.
    default: merged
    choices: ['merged', 'deleted']
"""
EXAMPLES = """
# Using deleted

# Before state:
# -------------
#
# interface Ethernet40
#   channel-group 10

- name: Delete LAG attributes of given interface (Note: This won't delete the port-channel itself).
  sonic_lag_interfaces:
    config:
      - name: PortChannel10
    state: deleted

# After state:
# ------------
#
# interface Ethernet40
#   no channel-group


# Using merged

# Before state:
# -------------
#
# interface Ethernet40
# interface Ethernet60
#   channel-group 12

- name: Merge provided configuration with device configuration.
  sonic_lag_interfaces:
    config:
      - name: PortChannel10
        members:
          interfaces:
            - member: Ethernet40
    state: merged

# After state:
# ------------
#
# interface Ethernet40
#   channel-group 10
# interface Ethernet60
#   channel-group 12


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.dellemc.sonic.plugins.module_utils.network.sonic.argspec.bgp_neighbors.bgp_neighbors import Bgp_neighborsArgs
from ansible_collections.dellemc.sonic.plugins.module_utils.network.sonic.config.bgp_neighbors.bgp_neighbors import Bgp_neighbors


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Bgp_neighborsArgs.argument_spec,
                           supports_check_mode=True)

    result = Bgp_neighbors(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
