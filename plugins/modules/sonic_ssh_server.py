#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for sonic_ssh_server
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community',
    'license': 'Apache 2.0'
}

DOCUMENTATION = """
---
module: sonic_ssh_server
version_added: '2.1.0'
short_description: Manage SSH server configurations on SONiC
description:
  - This module provides SSH configuration management to specify the
     algorithms used for SSH connection in devices running SONiC.
author: 'Dell'
options:
  config:
    description:
      - SSH clients and servers use the following configurations for SSH connections.
    type: dict
    suboptions:
      server-globals:
        description:
          SSH server configuration
        type: dict
        suboptions:
          password-authentication:
            description:
              - Configure password authentication on ssh server.
                By default it is enabled.
            type: bool 
          publickey-authentication:
            description:
              - Configure publickey authentication on ssh server.
                By default it is enabled.
            type: bool 
  state:
    description:
      - The state specifies the type of configuration update to be performed on the device.
         If the state is "merged", merge specified attributes with existing configured attributes.
         For "deleted", delete the specified attributes from existing configuration.
    type: str
    choices:
      - merged
      - deleted
      - replaced
      - overridden
    default: merged
"""
EXAMPLES = """
# Using deleted
#
# Before State:
# -------------
#
# sonic# show running-configuration | grep "ip ssh"
# ip ssh disable-publickey-authentication true
# sonic#

  - name: Delete specified SSH configurations
    dellemc.enterprise_sonic.sonic_ssh_server:
      config:
      	client:
          publickey-authentication: false
      state: deleted

# After State:
# ------------
#
# sonic# show running-configuration | grep "ip ssh"
# ip ssh client disable-publickey-authentication false
# sonic#


# Using deleted
#
# Before State:
# -------------
#
# sonic# show running-configuration | grep "ip ssh"
# ip ssh disable-publickey-authentication true
# sonic#

  - name: Delete all SSH configurations
    dellemc.enterprise_sonic.sonic_ssh_server:
      config:
      state: deleted

# After State:
# ------------
#
# sonic# show running-configuration | grep "ip ssh"
# sonic# ip ssh disable-publickey-authentication false


# Using merged
#
# Before State:
# -------------
#
# sonic# show running-configuration | grep "ip ssh"
# ip ssh disable-publickey-authentication false
# sonic#

  - name: Modify SSH configurations
    dellemc.enterprise_sonic.sonic_ssh_server:
      config:
        client:
          publickey-authentication: false
      state: merged

# After State:
# ------------
#
# sonic# show running-configuration | grep "ip ssh"
# ip ssh disable-publickey-authentication true
# sonic#


# Using replaced
#
# Before State:
# -------------
#
# sonic# show running-configuration | grep "ip ssh client"
# ip ssh client ciphers aes192-ctr,chacha20-poly1305@openssh.com
# ip ssh client kexalgorithms curve25519-sha256,diffie-hellman-group16-sha512
# ip ssh client macs umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com
# sonic#

  - name: Modify SSH configurations
    dellemc.enterprise_sonic.sonic_ssh:
      config:
        client:
          cipher: 'aes256-ctr'
          kex: 'curve25519-sha256,diffie-hellman-group16-sha512'
      state: replaced

# After State:
# ------------
#
# sonic# show running-configuration | grep "ip ssh client"
# ip ssh client ciphers aes256-ctr
# ip ssh client kexalgorithms curve25519-sha256,diffie-hellman-group16-sha512
# sonic#


# Using overridden
#
# Before State:
# -------------
#
# sonic# show running-configuration | grep "ip ssh"
# ip ssh disable-publickey-authentication false
# sonic#

  - name: Modify SSH configurations
    dellemc.enterprise_sonic.sonic_ssh:
      config:
        client:
          publickey-authentication: false
      state: overridden

# After State:
# ------------
#
# sonic# show running-configuration | grep "ip ssh"
# ip ssh disable-publickey-authentication true
# sonic#


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.dellemc.enterprise_sonic.plugins.module_utils.network.sonic.argspec.ssh_server.ssh_server import Ssh_serverArgs
from ansible_collections.dellemc.enterprise_sonic.plugins.module_utils.network.sonic.config.ssh_server.ssh_server import Ssh_server


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Ssh_serverArgs.argument_spec,
                           supports_check_mode=True)

    result = Ssh_server(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
