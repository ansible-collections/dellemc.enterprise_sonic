#!/usr/bin/python
# -*- coding: utf-8 -*-
# Â© Copyright 2020 Dell Inc. or its subsidiaries. All Rights Reserved
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for sonic_vxlans
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = """
---
module: sonic_vxlans
version_added: 1.0.0
short_description: Manages interface attributes on devices running Enterprise SONiC.
description: 'Manages interface attributes of SONiC interfaces.'
author: 'Niraimadaiselvam M(@niraimadaiselvamm)'
notes:
  - Tested against Enterprise SONiC, release 3.0.2
options:
  config:
    description:
      - A list of vxlans configurations.
      - source_ip and evpn_nvo are required together.
    type: list
    elements: dict
    suboptions:
      name:
        type: str
        description: 'The name of the vxlans.'
        required: true
      source_ip:
        description: 'The source ip of the vtep.'
        type: str
      vlan_map:
        description: 'list of vni map of vlan.'
        type: list
        elements: dict
        suboptions:
          vni:
            type: int
            description: 'specifies the vni id.'
            required: true
          vlan:
            type: int
            description: 'Vlan id for vni vlan map.'
            required: true
      vrf_map:
        description: 'list of vni map of vrf.'
        type: list
        elements: dict
        suboptions:
          vni:
            type: int
            description: 'specifies the vni id.'
            required: true
          vrf:
            type: str
            description: 'Vrf name for vni vrf map'
            required: true
  state:
    description: 'The state of the configuration after module completion.'
    type: str
    choices:
    - merged
    - deleted
    default: merged
"""
EXAMPLES = """
# Using deleted
#
# Before state:
# -------------
#
# do show running-configuration
#
#interface vxlan vteptest1
# source-ip 1.1.1.1
# map vni 101 vlan 11
# map vni 102 vlan 12
# map vni 101 vrf Vrfcheck1
# map vni 102 vrf Vrfcheck2
#!
#
#    - name: "Test sonic_vxlans deleted state 01"
#      sonic_vxlans:
#        config:
#          - name: vteptest1
#            source_ip: 1.1.1.1
#            vlan_map:
#              - vni: 101
#                vlan: 11
#            vrf_map:
#              - vni: 101
#                vrf: Vrfcheck1
#        state: deleted
#
# After state:
# ------------
#
# do show running-configuration
#
#interface vxlan vteptest1
# source-ip 1.1.1.1
# map vni 102 vlan 12
# map vni 102 vrf Vrfcheck2
#!
#
# Using deleted
#
# Before state:
# -------------
#
# do show running-configuration
#
#interface vxlan vteptest1
# source-ip 1.1.1.1
# map vni 102 vlan 12
# map vni 102 vrf Vrfcheck2
#!
#
#    - name: "Test sonic_vxlans deleted state 02"
#      sonic_vxlans:
#        config:
#        state: deleted
#
# After state:
# ------------
#
# do show running-configuration
#
#!
#
# Using merged
#
# Before state:
# -------------
#
# do show running-configuration
#
#!
#
#    - name: "Test sonic_vxlans merged state 01"
#      sonic_vxlans:
#        config:
#          - name: vteptest1
#            source_ip: 1.1.1.1
#            evpn_nvo_name: nvo1
#            vlan_map:
#              - vni: 101
#                vlan: 11
#              - vni: 102
#                vlan: 12
#            vrf_map:
#              - vni: 101
#                vrf: Vrfcheck1
#              - vni: 102
#                vrf: Vrfcheck2
#        state: merged
#
# After state:
# ------------
#
# do show running-configuration
#
#interface vxlan vteptest1
# source-ip 1.1.1.1
# map vni 101 vlan 11
# map vni 102 vlan 12
# map vni 101 vrf Vrfcheck1
# map vni 102 vrf Vrfcheck2
#!
# """
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  type: list
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  type: list
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.dellemc.enterprise_sonic.plugins.module_utils.network.sonic.argspec.vxlans.vxlans import VxlansArgs
from ansible_collections.dellemc.enterprise_sonic.plugins.module_utils.network.sonic.config.vxlans.vxlans import Vxlans


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=VxlansArgs.argument_spec,
                           supports_check_mode=True)

    result = Vxlans(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
